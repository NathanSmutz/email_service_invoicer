;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{hash}, :name reagent.format, :imports nil, :requires {goog.crypt goog.crypt, Md5 goog.crypt.Md5, Sha384 goog.crypt.Sha384, gstring goog.string, Sha1 goog.crypt.Sha1, nf goog.i18n.NumberFormat, symbols goog.i18n.NumberFormatSymbols, goog.crypt.Sha2 goog.crypt.Sha2, goog.string goog.string, goog.crypt.Sha1 goog.crypt.Sha1, goog.i18n.DateTimeFormat goog.i18n.DateTimeFormat, goog.i18n.NumberFormat goog.i18n.NumberFormat, Sha2 goog.crypt.Sha2, Sha512 goog.crypt.Sha512, goog.string.format goog.string.format, crypt goog.crypt, s clojure.string, Sha256 goog.crypt.Sha256, dtf goog.i18n.DateTimeFormat, clojure.string clojure.string, goog.crypt.Sha384 goog.crypt.Sha384, goog.crypt.Md5 goog.crypt.Md5, goog.crypt.Sha256 goog.crypt.Sha256, goog.i18n.NumberFormatSymbols goog.i18n.NumberFormatSymbols, goog.crypt.Sha512 goog.crypt.Sha512}, :uses nil, :defs {format {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/reagent/format.cljs", :line 36, :column 7, :end-line 36, :end-column 13, :arglists (quote ([fmt & args])), :doc "Formats a string using goog.string.format.\n   e.g: (format \"Cost: %.2f\" 10.0234)", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists ([fmt & args]), :arglists-meta (nil)}}, :name reagent.format/format, :variadic true, :file "public/js/out/reagent/format.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists ([fmt & args]), :arglists-meta (nil)}, :method-params [(fmt args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & args]), :doc "Formats a string using goog.string.format.\n   e.g: (format \"Cost: %.2f\" 10.0234)"}, printf {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/reagent/format.cljs", :line 42, :column 7, :end-line 42, :end-column 13, :arglists (quote ([fmt & args])), :doc "Prints formatted output, as per format", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists ([fmt & args]), :arglists-meta (nil)}}, :name reagent.format/printf, :variadic true, :file "public/js/out/reagent/format.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists ([fmt & args]), :arglists-meta (nil)}, :method-params [(fmt args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & args]), :doc "Prints formatted output, as per format"}, line-numbers {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/reagent/format.cljs", :line 63, :column 7, :end-line 63, :end-column 19, :arglists (quote ([s]))}, :name reagent.format/line-numbers, :variadic false, :file "public/js/out/reagent/format.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, encode-uri {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/reagent/format.cljs", :line 104, :column 7, :end-line 104, :end-column 17, :arglists (quote ([uri]))}, :name reagent.format/encode-uri, :variadic false, :file "public/js/out/reagent/format.cljs", :end-column 17, :method-params ([uri]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([uri]))}, remove-tags {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/reagent/format.cljs", :line 90, :column 7, :end-line 90, :end-column 18, :arglists (quote ([s & tags])), :doc "removes specified tags, eg:\n   (remove-tags \"<p>foo bar</p>\" \"p\")", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s tags)], :arglists ([s & tags]), :arglists-meta (nil)}}, :name reagent.format/remove-tags, :variadic true, :file "public/js/out/reagent/format.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s tags)], :arglists ([s & tags]), :arglists-meta (nil)}, :method-params [(s tags)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists ([s & tags]), :doc "removes specified tags, eg:\n   (remove-tags \"<p>foo bar</p>\" \"p\")"}, currency-format {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/reagent/format.cljs", :line 47, :column 7, :end-line 47, :end-column 22, :arglists (quote ([n])), :doc "formats currency using the current locale\n   to change locale set goog.i18n.NumberFormatSymbols eg:\n   (set! goog.i18n.NumberFormatSymbols goog.i18n.NumberFormatSymbols_it_IT)\n   see here for supported locales\n   https://github.com/google/closure-library/blob/master/closure/goog/i18n/compactnumberformatsymbols.js\n  "}, :name reagent.format/currency-format, :variadic false, :file "public/js/out/reagent/format.cljs", :end-column 22, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "formats currency using the current locale\n   to change locale set goog.i18n.NumberFormatSymbols eg:\n   (set! goog.i18n.NumberFormatSymbols goog.i18n.NumberFormatSymbols_it_IT)\n   see here for supported locales\n   https://github.com/google/closure-library/blob/master/closure/goog/i18n/compactnumberformatsymbols.js\n  "}, add-slashes {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/reagent/format.cljs", :line 18, :column 7, :end-line 18, :end-column 18, :arglists (quote ([s]))}, :name reagent.format/add-slashes, :variadic false, :file "public/js/out/reagent/format.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, capitalize-words {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/reagent/format.cljs", :line 85, :column 7, :end-line 85, :end-column 23, :arglists (quote ([s]))}, :name reagent.format/capitalize-words, :variadic false, :file "public/js/out/reagent/format.cljs", :end-column 23, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, date-format {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/reagent/format.cljs", :line 57, :column 7, :end-line 57, :end-column 18, :arglists (quote ([date fmt & [tz]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(date fmt [tz])], :arglists ([date fmt & [tz]]), :arglists-meta (nil)}}, :name reagent.format/date-format, :variadic true, :file "public/js/out/reagent/format.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(date fmt [tz])], :arglists ([date fmt & [tz]]), :arglists-meta (nil)}, :method-params [(date fmt [tz])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists ([date fmt & [tz]])}, center {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/reagent/format.cljs", :line 27, :column 7, :end-line 27, :end-column 13, :arglists (quote ([text w]))}, :name reagent.format/center, :variadic false, :file "public/js/out/reagent/format.cljs", :end-column 13, :method-params ([text w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text w]))}, pluralize {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/reagent/format.cljs", :line 69, :column 7, :end-line 69, :end-column 16, :arglists (quote ([items & [word ending1 ending2 :as opts]])), :doc "pluralizes the word based on the number of items\n   (util/pluralize [\"John\"] \"lad\")\n   (util/pluralize [\"John\" \"James\"] \"lad\")\n   (util/pluralize [\"Alice\"] \"lad\" \"y\" \"ies\")", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(items [word ending1 ending2 :as opts])], :arglists ([items & [word ending1 ending2 :as opts]]), :arglists-meta (nil)}}, :name reagent.format/pluralize, :variadic true, :file "public/js/out/reagent/format.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(items [word ending1 ending2 :as opts])], :arglists ([items & [word ending1 ending2 :as opts]]), :arglists-meta (nil)}, :method-params [(items [word ending1 ending2 :as opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists ([items & [word ending1 ending2 :as opts]]), :doc "pluralizes the word based on the number of items\n   (util/pluralize [\"John\"] \"lad\")\n   (util/pluralize [\"John\" \"James\"] \"lad\")\n   (util/pluralize [\"Alice\"] \"lad\" \"y\" \"ies\")"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else list}, :order [list :else]}, :doc nil}