;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name plato.core, :imports nil, :requires {string clojure.string, clojure.string clojure.string, cljs.reader cljs.reader}, :uses {read-string cljs.reader}, :defs {split-key {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 33, :column 8, :end-line 33, :end-column 17, :private true, :arglists (quote ([nested-key])), :doc "Returns a list of keys as split from a nested key string."}, :private true, :name plato.core/split-key, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 17, :method-params ([nested-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nested-key])), :doc "Returns a list of keys as split from a nested key string."}, get-by-string {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 132, :column 8, :end-line 132, :end-column 21, :private true, :arglists (quote ([path-string]))}, :private true, :name plato.core/get-by-string, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 21, :method-params ([path-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path-string]))}, pathify {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 45, :column 8, :end-line 45, :end-column 15, :private true, :arglists (quote ([base-vector m])), :doc "Takes an arbitrarily nested map and returns a list\n  vectors, where each vectors is a tuple of a path\n  describing, as well as a value.\n  \n  For example, called with the base-vector [\"com.example\"],\n  and the map {:a 1 :b {:c 2 :d 3}}, the function returns\n  ([[\"com.example\" :a] 1]\n  [[\"com.example\" :b :c] 2]\n  [[\"com.example\" :b :d] 3])"}, :private true, :name plato.core/pathify, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 15, :method-params ([base-vector m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-vector m])), :doc "Takes an arbitrarily nested map and returns a list\n  vectors, where each vectors is a tuple of a path\n  describing, as well as a value.\n  \n  For example, called with the base-vector [\"com.example\"],\n  and the map {:a 1 :b {:c 2 :d 3}}, the function returns\n  ([[\"com.example\" :a] 1]\n  [[\"com.example\" :b :c] 2]\n  [[\"com.example\" :b :d] 3])"}, diff-states {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 13, :column 7, :end-line 13, :end-column 18, :arglists (quote ([old-state new-state]))}, :name plato.core/diff-states, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 18, :method-params ([old-state new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([old-state new-state]))}, restore-state {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 144, :column 7, :end-line 144, :end-column 20, :arglists (quote ([base-key])), :doc "Get all localStorage entries beginning with the given base-key."}, :name plato.core/restore-state, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 20, :method-params ([base-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 1, :fn-var true, :arglists (quote ([base-key])), :doc "Get all localStorage entries beginning with the given base-key."}, erase-many! {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 170, :column 7, :end-line 170, :end-column 18, :arglists (quote ([base-key path-vectors])), :doc "Remove all keys that belonging to the given base-key\n  from local storage."}, :name plato.core/erase-many!, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 18, :method-params ([base-key path-vectors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-key path-vectors])), :doc "Remove all keys that belonging to the given base-key\n  from local storage."}, removed-to-strings {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 192, :column 8, :end-line 192, :end-column 26, :private true, :arglists (quote ([pathified]))}, :private true, :name plato.core/removed-to-strings, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 26, :method-params ([pathified]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pathified]))}, store! {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 91, :column 7, :end-line 91, :end-column 13, :arglists (quote ([base-key path-vector value])), :doc "Updates a particular key stored in local storage.\n  For example, (store! \"com.test\" [:foo :bar] \"Hello World!\")\n  will update the key com.test:foo:bar to have value \"Hello world\"\n  in local storage."}, :name plato.core/store!, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 13, :method-params ([base-key path-vector value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 3, :fn-var true, :arglists (quote ([base-key path-vector value])), :doc "Updates a particular key stored in local storage.\n  For example, (store! \"com.test\" [:foo :bar] \"Hello World!\")\n  will update the key com.test:foo:bar to have value \"Hello world\"\n  in local storage."}, store-atom! {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 116, :column 7, :end-line 116, :end-column 18, :arglists (quote ([base-key an-atom])), :doc "Takes an atom and stores the state it contains in local storage."}, :name plato.core/store-atom!, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 18, :method-params ([base-key an-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-key an-atom])), :doc "Takes an atom and stores the state it contains in local storage."}, keep-updated! {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 198, :column 7, :end-line 198, :end-column 20, :arglists (quote ([base-key an-atom] [base-key an-atom log-updates])), :doc "Updates local storage with all changes made to an atom.\n  Call with true as third arg to switch on logging.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([base-key an-atom] [base-key an-atom log-updates]), :arglists ([base-key an-atom] [base-key an-atom log-updates]), :arglists-meta (nil nil)}}, :name plato.core/keep-updated!, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([base-key an-atom] [base-key an-atom log-updates]), :arglists ([base-key an-atom] [base-key an-atom log-updates]), :arglists-meta (nil nil)}, :method-params ([base-key an-atom] [base-key an-atom log-updates]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 3, :fn-var true, :arglists ([base-key an-atom] [base-key an-atom log-updates]), :doc "Updates local storage with all changes made to an atom.\n  Call with true as third arg to switch on logging."}, clean-key {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 38, :column 8, :end-line 38, :end-column 17, :private true, :arglists (quote ([base-key nested-key])), :doc "Removes the base-key from the nested-key.\n  Note: The : is added to base-key to avoid getting a trailing :\n  when the nested key is turned into a collection"}, :private true, :name plato.core/clean-key, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 17, :method-params ([base-key nested-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-key nested-key])), :doc "Removes the base-key from the nested-key.\n  Note: The : is added to base-key to avoid getting a trailing :\n  when the nested key is turned into a collection"}, assoc-nil {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 9, :column 8, :end-line 9, :end-column 17, :private true, :arglists (quote ([x y]))}, :private true, :name plato.core/assoc-nil, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 17, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, store-many! {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 100, :column 7, :end-line 100, :end-column 18, :arglists (quote ([base-key path-vectors])), :doc "Stores a collection of path vectors in local storage.\n  The path vectors should be on format:\n  ([[:a] 1]\n  [[:b :c] 2]\n  [[:b :d] 3])"}, :name plato.core/store-many!, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 18, :method-params ([base-key path-vectors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-key path-vectors])), :doc "Stores a collection of path vectors in local storage.\n  The path vectors should be on format:\n  ([[:a] 1]\n  [[:b :c] 2]\n  [[:b :d] 3])"}, get-our-keys {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 136, :column 8, :end-line 136, :end-column 20, :private true, :arglists (quote ([base-key]))}, :private true, :name plato.core/get-our-keys, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 20, :method-params ([base-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 1, :fn-var true, :arglists (quote ([base-key]))}, to-string {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 79, :column 8, :end-line 79, :end-column 17, :private true, :arglists (quote ([base-key path-vector]))}, :private true, :name plato.core/to-string, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 17, :method-params ([base-key path-vector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-key path-vector]))}, unkeyify {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 62, :column 8, :end-line 62, :end-column 16, :private true, :arglists (quote ([base-key keyified-map])), :doc "Takes a base-key and a map of entries on format\n  {com.example:a 1\n  com.example:nested:c 2}\n  and returns a map such that the base-key is removed from the beginning\n  of each key, and the rest is parsed into a map structure. The example above\n  should return\n  {:a 1 :nested {:c 2}}"}, :private true, :name plato.core/unkeyify, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 16, :method-params ([base-key keyified-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-key keyified-map])), :doc "Takes a base-key and a map of entries on format\n  {com.example:a 1\n  com.example:nested:c 2}\n  and returns a map such that the base-key is removed from the beginning\n  of each key, and the rest is parsed into a map structure. The example above\n  should return\n  {:a 1 :nested {:c 2}}"}, restore {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 140, :column 7, :end-line 140, :end-column 14, :arglists (quote ([base-key path-vector]))}, :name plato.core/restore, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 14, :method-params ([base-key path-vector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-key path-vector]))}, added-to-strings {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 188, :column 8, :end-line 188, :end-column 24, :private true, :arglists (quote ([pathified]))}, :private true, :name plato.core/added-to-strings, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 24, :method-params ([pathified]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pathified]))}, restore-atom! {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 151, :column 7, :end-line 151, :end-column 20, :arglists (quote ([base-key an-atom])), :doc "Get stored state from local storage and reset the given atom with it."}, :name plato.core/restore-atom!, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 20, :method-params ([base-key an-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-key an-atom])), :doc "Get stored state from local storage and reset the given atom with it."}, erase-all! {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 178, :column 7, :end-line 178, :end-column 17, :arglists (quote ([base-key])), :doc "Remove all data belonging to the supplied base-key."}, :name plato.core/erase-all!, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 17, :method-params ([base-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 1, :fn-var true, :arglists (quote ([base-key])), :doc "Remove all data belonging to the supplied base-key."}, filter-our-keys {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 125, :column 8, :end-line 125, :end-column 23, :private true, :arglists (quote ([base-key all-keys])), :doc "From a list of all keys, return a list with the keys that\n  contains our base-key only."}, :private true, :name plato.core/filter-our-keys, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 23, :method-params ([base-key all-keys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-key all-keys])), :doc "From a list of all keys, return a list with the keys that\n  contains our base-key only."}, erase! {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 164, :column 7, :end-line 164, :end-column 13, :arglists (quote ([base-key path-vector])), :doc "Removes a value from local storage."}, :name plato.core/erase!, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 13, :method-params ([base-key path-vector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-key path-vector])), :doc "Removes a value from local storage."}, erase-string! {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 159, :column 8, :end-line 159, :end-column 21, :private true, :arglists (quote ([a-string])), :doc "Erase an entry from local storage given the supplied string."}, :private true, :name plato.core/erase-string!, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 21, :method-params ([a-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a-string])), :doc "Erase an entry from local storage given the supplied string."}, store-state! {:protocol-inline nil, :meta {:file "/home/nathan/workspace/service-invoicer/email-invoicer/public/js/out/plato/core.cljs", :line 111, :column 7, :end-line 111, :end-column 19, :arglists (quote ([base-key state])), :doc "Takes hash-map and stores it in local storage."}, :name plato.core/store-state!, :variadic false, :file "public/js/out/plato/core.cljs", :end-column 19, :method-params ([base-key state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-key state])), :doc "Takes hash-map and stores it in local storage."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:a-key}, :order [:a-key]}, :doc nil}